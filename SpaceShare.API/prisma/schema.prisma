// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int   @default(autoincrement()) @id
  first_name    String    
  middle_name   String?
  surname   String
  birthdate   DateTime
  email   String    @unique
  password    String
  region    String
  province    String?
  city    String
  postal_code   String
  is_proprietor   Boolean   @default(false)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  properties    Property[]
  notifications    Notification[]
  wishlists     Wishlist[]
  phone_number    PhoneNumber[]
  review    Review[]
  application   TenantApplication[]
  booking     Booking[]
}

model Property {
  id    Int   @default(autoincrement()) @id
  property    User    @relation(fields: [owner_id], references: [id])
  owner_id    Int
  title   String
  description   String?
  region    String
  province    String?
  city    String
  barangay    String
  postal_code   String
  price   Int
  status    Boolean
  rating    Float
  capacity    Int

  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  wishlists   Wishlist[]
  review    Review[]
  application   TenantApplication[]
  images    Images[]
  booking     Booking[]
}

model Images{
  id    Int   @default(autoincrement()) @id
  property    Property    @relation(fields: [property_id], references: [id])
  property_id   Int
  image_url   String
}

model Notification {
  id    Int   @default(autoincrement()) @id
  user    User    @relation(fields: [user_id], references: [id])
  user_id   Int
  content   String
  is_read   Boolean
  created_at    DateTime    @default(now())
}

model Wishlist {
  id    Int   @default(autoincrement()) @id
  user    User    @relation(fields: [user_id], references: [id])
  user_id   Int
  property    Property    @relation(fields: [property_id], references: [id])
  property_id   Int
  added_at    DateTime    @default(now())
}

model PhoneNumber {
  id    Int   @default(autoincrement()) @id
  user    User    @relation(fields: [user_id], references: [id])
  user_id   Int
  number    String
  number_type   String
}

model Review {
  id            Int    @default(autoincrement()) @id
  reviewer      User   @relation(fields: [reviewer_id], references: [id])
  reviewer_id   Int
  property    Property    @relation(fields: [property_id], references: [id])
  property_id   Int
  rating    Float
  description   String?

  created_at    DateTime    @default(now())
}

model TenantApplication {
  id    Int     @default(autoincrement())  @id
  property    Property    @relation(fields: [property_id], references: [id])
  property_id   Int
  user    User    @relation(fields: [applicant_id], references: [id])
  applicant_id    Int
  status    String
  notes   String?

  created_at DateTime   @default(now())
}

model Booking {
  id    Int     @default(autoincrement()) @id
  property    Property    @relation(fields: [property_id], references: [id])
  property_id   Int
  user    User    @relation(fields: [tenant_id], references: [id])
  tenant_id   Int
  start_date  DateTime
  end_date    DateTime
  price   Float
  guest_count   Int   @default(1)

  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}







